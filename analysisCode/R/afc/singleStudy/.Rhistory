, ylab = 'amount earned'
, col = colo
#, names.arg = c('cooperators', 'defectors')
, legend.text = c("Cooperators","Defectors")
, args.legend = list(x="topright", bty='n')
)
par(mfrow=c(1,1))
bp <- barplot(tots
, ylim = c(0,75)
#, axes=FALSE
, ylab = 'amount earned'
, col = colo
#, names.arg = c('cooperators', 'defectors')
, legend.text = c("Cooperators","Defectors")
, args.legend = list(x="middleleft", bty='n')
)
par(mfrow=c(1,1))
bp <- barplot(tots
, ylim = c(0,75)
#, axes=FALSE
, ylab = 'amount earned'
, col = colo
#, names.arg = c('cooperators', 'defectors')
, legend.text = c("Cooperators","Defectors")
, args.legend = list(x="centerleft", bty='n')
)
?legend
par(mfrow=c(1,1))
bp <- barplot(tots
, ylim = c(0,75)
#, axes=FALSE
, ylab = 'amount earned'
, col = colo
#, names.arg = c('cooperators', 'defectors')
, legend.text = c("Cooperators","Defectors")
, args.legend = list(x="left", bty='n')
)
library(ggplot2)
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
if(length(x) != length(y) | length(y) !=length(lower) | length(lower) != length(upper))
stop("vectors must be same length")
arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}
setwd("D:/googleDrive/uMass/firstYear/behavioralExpts/pSadil/processDissociation/CFS/analysisCode/R/afc")
setwd("D:/googleDrive/uMass/firstYear/behavioralExpts/pSadil/processDissociation/CFS/analysisCode/R/afc")
wd <- getwd()
dataFile <- paste(wd, "/cfs_obj_2afc.dat", sep="")
# find the data that was generated from the matlab files
data <- read.csv(dataFile)
# add 1 to study resp because participants were instructed to use 0-3
data$studyResp = data$studyResp+1
nConds = max(data$condition,na.rm=TRUE)
nPAS = max(data[data$studyResp < 1000,]$studyResp,na.rm=TRUE)
nItems = max(data$whichItem,na.rm=TRUE)
nSubs = max(data$subject,na.rm=TRUE)
nTrials = max(data$trial,na.rm=TRUE)
# number of items in each condition, first presentation
nPerCond = nItems/nConds
data$trial = as.factor(data$trial)
data$whichItem = as.factor(data$whichItem)
data$subject = as.factor(data$subject)
data$condition = as.factor(data$condition)
studyConds <- c("foil","word","cfs","binoc")
cols <- c('black', 'cornflowerblue', 'darkgoldenrod1', 'red')
data_trim <- na.omit(data)
cutoff= 2
rRates.pasCond_mean = matrix(0,ncol=nConds,nrow=nPAS)
rRates.pasCond_sem = matrix(0,ncol=nConds,nrow=nPAS)
rRates.pasCond_n = matrix(0,ncol=nConds,nrow=nPAS)
for (cond in 1:nConds) {
for (pas in 1:nPAS) {
rRates.pasCond_mean[cond,pas] <-
mean(data_trim[data_trim$condition==cond &
data_trim$studyResp==pas,]$named,
na.rm=TRUE)
rRates.pasCond_n[cond,pas] <-
dim(data_trim[data_trim$condition==cond &
data_trim$studyResp==pas,])[1]
# var = n*p*(1-p)
rRates.pasCond_sem[cond,pas] <-
sqrt(rRates.pasCond_n[cond,pas] * rRates.pasCond_mean[cond,pas] *
(1- rRates.pasCond_mean[cond,pas])) /
sqrt(rRates.pasCond_n[cond,pas])
}
}
par(mfrow=c(1,1))
pasResps <- c("0","1","2","3")
pasCond.bp <- barplot(t(rRates.pasCond_mean),
beside=TRUE,
names.arg=studyConds,
ylim=c(0,1),
#col=presentCol,
legend.text=pasResps,
args.legend = list(x="topleft"),
xlab = "study length",
ylab = "proportion named"
)
error.bar(pasCond.bp,t(rRates.pasCond_mean),
t(rRates.pasCond_sem))
rRates.pasCond_n.prop = matrix(0,nrow=4,ncol=4)
for (cond in 1:nConds) {
for (pas in 1:nPAS){
rRates.pasCond_n.prop[cond,pas] <-
rRates.pasCond_n[cond,pas] /
sum(rRates.pasCond_n[cond,])
}
}
par(mfrow=c(1,1))
# looking at raw numbers of each PAS per condition
pasCond_n.bp <- barplot(t(rRates.pasCond_n.prop),
beside=TRUE,
names.arg=studyConds,
ylim=c(0,1),
#col=presentCol,
legend.text=pasResps,
args.legend = list(x="topleft"),
xlab = "study length",
ylab = "proportion of resposnes"
)
rRates.cond_mean = rep(0,nConds)
rRates.cond_sem = rep(0,nConds)
rRates.cond_n = rep(0,nConds)
for (cond in 1:nConds) {
if (cond == 3){
rRates.cond_mean[cond] <-
mean(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff),]$named,
na.rm=TRUE)
rRates.cond_n[cond] <-
dim(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff ),])[1]
} else {
rRates.cond_mean[cond] <-
mean(data_trim[data_trim$condition==cond,]$named,
na.rm=TRUE)
rRates.cond_n[cond] <-
dim(data_trim[data_trim$condition==cond,])[1]
}
# var = n*p*(1-p)
rRates.cond_sem[cond] <-
sqrt(rRates.cond_n[cond] * rRates.cond_mean[cond] *
(1- rRates.cond_mean[cond])) /
sqrt(rRates.cond_n[cond])
}
# look at 2afc rates for pas < 3, collapsed across subs
afcRates.cond_mean = rep(0,nConds)
afcRates.cond_sem = rep(0,nConds)
afcRates.cond_n = rep(0,nConds)
for (cond in 1:nConds) {
if (cond == 3){
afcRates.cond_mean[cond] <-
mean(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff),]$afc,
na.rm=TRUE)
afcRates.cond_n[cond] <-
dim(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff ),])[1]
} else {
afcRates.cond_mean[cond] <-
mean(data_trim[data_trim$condition==cond,]$afc,
na.rm=TRUE)
afcRates.cond_n[cond] <-
dim(data_trim[data_trim$condition==cond,])[1]
}
# var = n*p*(1-p)
afcRates.cond_sem[cond] <-
sqrt(afcRates.cond_n[cond] * afcRates.cond_mean[cond] *
(1- rRates.cond_mean[cond])) /
sqrt(afcRates.cond_n[cond])
}
new <- plot(afcRates.cond_mean,rRates.cond_mean
, xlim = c(0,1)
, ylim = c(0,1)
, col = cols
, xlab = 'prop 2afc correct'
, ylab = 'recall rate'
)
legend("topleft", legend = studyConds,
col=cols,pch = 1,bty="n")
cutoff= 5
# look at recal rates for pas < 3, collapsed across subs
rRates.cond_mean = rep(0,nConds)
rRates.cond_sem = rep(0,nConds)
rRates.cond_n = rep(0,nConds)
for (cond in 1:nConds) {
if (cond == 3){
rRates.cond_mean[cond] <-
mean(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff),]$named,
na.rm=TRUE)
rRates.cond_n[cond] <-
dim(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff ),])[1]
} else {
rRates.cond_mean[cond] <-
mean(data_trim[data_trim$condition==cond,]$named,
na.rm=TRUE)
rRates.cond_n[cond] <-
dim(data_trim[data_trim$condition==cond,])[1]
}
# var = n*p*(1-p)
rRates.cond_sem[cond] <-
sqrt(rRates.cond_n[cond] * rRates.cond_mean[cond] *
(1- rRates.cond_mean[cond])) /
sqrt(rRates.cond_n[cond])
}
# look at 2afc rates for pas < 3, collapsed across subs
afcRates.cond_mean = rep(0,nConds)
afcRates.cond_sem = rep(0,nConds)
afcRates.cond_n = rep(0,nConds)
for (cond in 1:nConds) {
if (cond == 3){
afcRates.cond_mean[cond] <-
mean(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff),]$afc,
na.rm=TRUE)
afcRates.cond_n[cond] <-
dim(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff ),])[1]
} else {
afcRates.cond_mean[cond] <-
mean(data_trim[data_trim$condition==cond,]$afc,
na.rm=TRUE)
afcRates.cond_n[cond] <-
dim(data_trim[data_trim$condition==cond,])[1]
}
# var = n*p*(1-p)
afcRates.cond_sem[cond] <-
sqrt(afcRates.cond_n[cond] * afcRates.cond_mean[cond] *
(1- rRates.cond_mean[cond])) /
sqrt(afcRates.cond_n[cond])
}
new <- plot(afcRates.cond_mean,rRates.cond_mean
, xlim = c(0,1)
, ylim = c(0,1)
, col = cols
, xlab = 'prop 2afc correct'
, ylab = 'recall rate'
)
legend("topleft", legend = studyConds,
col=cols,pch = 1,bty="n")
library(ggplot2)
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
if(length(x) != length(y) | length(y) !=length(lower) | length(lower) != length(upper))
stop("vectors must be same length")
arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}
nSubs
dataFile <- paste(wd, "/cfs_obj_2afc.dat", sep="")
data <- read.csv(dataFile)
data$studyResp = data$studyResp+1
nConds = max(data$condition,na.rm=TRUE)
nPAS = max(data[data$studyResp < 1000,]$studyResp,na.rm=TRUE)
nItems = max(data$whichItem,na.rm=TRUE)
nSubs = max(data$subject,na.rm=TRUE)
nTrials = max(data$trial,na.rm=TRUE)
nSubs
nPerCond = nItems/nConds
data$trial = as.factor(data$trial)
data$whichItem = as.factor(data$whichItem)
data$subject = as.factor(data$subject)
data$condition = as.factor(data$condition)
studyConds <- c("foil","word","cfs","binoc")
cols <- c('black', 'cornflowerblue', 'darkgoldenrod1', 'red')
data_trim <- na.omit(data)
cutoff= 5
cutoff= 3
rRates.pasCond_mean = matrix(0,ncol=nConds,nrow=nPAS)
rRates.pasCond_sem = matrix(0,ncol=nConds,nrow=nPAS)
rRates.pasCond_n = matrix(0,ncol=nConds,nrow=nPAS)
for (cond in 1:nConds) {
for (pas in 1:nPAS) {
rRates.pasCond_mean[cond,pas] <-
mean(data_trim[data_trim$condition==cond &
data_trim$studyResp==pas,]$named,
na.rm=TRUE)
rRates.pasCond_n[cond,pas] <-
dim(data_trim[data_trim$condition==cond &
data_trim$studyResp==pas,])[1]
# var = n*p*(1-p)
rRates.pasCond_sem[cond,pas] <-
sqrt(rRates.pasCond_n[cond,pas] * rRates.pasCond_mean[cond,pas] *
(1- rRates.pasCond_mean[cond,pas])) /
sqrt(rRates.pasCond_n[cond,pas])
}
}
par(mfrow=c(1,1))
pasResps <- c("0","1","2","3")
pasCond.bp <- barplot(t(rRates.pasCond_mean),
beside=TRUE,
names.arg=studyConds,
ylim=c(0,1),
#col=presentCol,
legend.text=pasResps,
args.legend = list(x="topleft"),
xlab = "study length",
ylab = "proportion named"
)
error.bar(pasCond.bp,t(rRates.pasCond_mean),
t(rRates.pasCond_sem))
rRates.pasCond_n.prop = matrix(0,nrow=4,ncol=4)
for (cond in 1:nConds) {
for (pas in 1:nPAS){
rRates.pasCond_n.prop[cond,pas] <-
rRates.pasCond_n[cond,pas] /
sum(rRates.pasCond_n[cond,])
}
}
par(mfrow=c(1,1))
# looking at raw numbers of each PAS per condition
pasCond_n.bp <- barplot(t(rRates.pasCond_n.prop),
beside=TRUE,
names.arg=studyConds,
ylim=c(0,1),
#col=presentCol,
legend.text=pasResps,
args.legend = list(x="topleft"),
xlab = "study length",
ylab = "proportion of resposnes"
)
rRates.cond_mean = rep(0,nConds)
rRates.cond_sem = rep(0,nConds)
rRates.cond_n = rep(0,nConds)
for (cond in 1:nConds) {
if (cond == 3){
rRates.cond_mean[cond] <-
mean(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff),]$named,
na.rm=TRUE)
rRates.cond_n[cond] <-
dim(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff ),])[1]
} else {
rRates.cond_mean[cond] <-
mean(data_trim[data_trim$condition==cond,]$named,
na.rm=TRUE)
rRates.cond_n[cond] <-
dim(data_trim[data_trim$condition==cond,])[1]
}
# var = n*p*(1-p)
rRates.cond_sem[cond] <-
sqrt(rRates.cond_n[cond] * rRates.cond_mean[cond] *
(1- rRates.cond_mean[cond])) /
sqrt(rRates.cond_n[cond])
}
# look at 2afc rates for pas < 3, collapsed across subs
afcRates.cond_mean = rep(0,nConds)
afcRates.cond_sem = rep(0,nConds)
afcRates.cond_n = rep(0,nConds)
for (cond in 1:nConds) {
if (cond == 3){
afcRates.cond_mean[cond] <-
mean(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff),]$afc,
na.rm=TRUE)
afcRates.cond_n[cond] <-
dim(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff ),])[1]
} else {
afcRates.cond_mean[cond] <-
mean(data_trim[data_trim$condition==cond,]$afc,
na.rm=TRUE)
afcRates.cond_n[cond] <-
dim(data_trim[data_trim$condition==cond,])[1]
}
# var = n*p*(1-p)
afcRates.cond_sem[cond] <-
sqrt(afcRates.cond_n[cond] * afcRates.cond_mean[cond] *
(1- rRates.cond_mean[cond])) /
sqrt(afcRates.cond_n[cond])
}
new <- plot(afcRates.cond_mean,rRates.cond_mean
, xlim = c(0,1)
, ylim = c(0,1)
, col = cols
, xlab = 'prop 2afc correct'
, ylab = 'recall rate'
)
legend("topleft", legend = studyConds,
col=cols,pch = 1,bty="n")
# look at recal rates for pas < 3, collapsed across subs
rRates_sub.cond_mean = matrix(0,nrow=nConds,ncol=nSubs)
rRates_sub.cond_sem = matrix(0,nrow=nConds,ncol=nSubs)
rRates_sub.cond_n = matrix(0,nrow=nConds,ncol=nSubs)
for (cond in 1:nConds) {
for (sub in 1:nSubs){
if (cond == 3){
rRates_sub.cond_mean[cond,sub] <-
mean(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff)
& data_trim$subject==sub,]$named,
na.rm=TRUE)
rRates_sub.cond_n[cond,sub] <-
dim(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff)
& data_trim$subject==sub,])[1]
} else {
rRates_sub.cond_mean[cond,sub] <-
mean(data_trim[data_trim$condition==cond
& data_trim$subject==sub,]$named,
na.rm=TRUE)
rRates_sub.cond_n[cond,sub] <-
dim(data_trim[data_trim$condition==cond
& data_trim$subject==sub,])[1]
}
# var = n*p*(1-p)
rRates_sub.cond_sem[cond,sub] <-
sqrt(rRates.cond_n[cond,sub] * rRates.cond_mean[cond,sub] *
(1- rRates.cond_mean[cond,sub])) /
sqrt(rRates.cond_n[cond,sub])
}
}
# look at recal rates for pas < 3, collapsed across subs
rRates_sub.cond_mean = matrix(0,nrow=nConds,ncol=nSubs)
rRates_sub.cond_sem = matrix(0,nrow=nConds,ncol=nSubs)
rRates_sub.cond_n = matrix(0,nrow=nConds,ncol=nSubs)
for (cond in 1:nConds) {
for (sub in 1:nSubs){
if (cond == 3){
rRates_sub.cond_mean[cond,sub] <-
mean(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff)
& data_trim$subject==sub,]$named,
na.rm=TRUE)
rRates_sub.cond_n[cond,sub] <-
dim(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff)
& data_trim$subject==sub,])[1]
} else {
rRates_sub.cond_mean[cond,sub] <-
mean(data_trim[data_trim$condition==cond
& data_trim$subject==sub,]$named,
na.rm=TRUE)
rRates_sub.cond_n[cond,sub] <-
dim(data_trim[data_trim$condition==cond
& data_trim$subject==sub,])[1]
}
# var = n*p*(1-p)
rRates_sub.cond_sem[cond,sub] <-
sqrt(rRates_sub.cond_n[cond,sub] * rRates_sub.cond_mean[cond,sub] *
(1- rRates_sub.cond_mean[cond,sub])) /
sqrt(rRates_sub.cond_n[cond,sub])
}
}
# look at 2afc rates for pas < 3, collapsed across subs
afcRates_sub.cond_mean = matrix(0,nrow=nConds,ncol=nSubs)
afcRates_sub.cond_sem = matrix(0,nrow=nConds,ncol=nSubs)
afcRates_sub.cond_n = matrix(0,nrow=nConds,ncol=nSubs)
for (cond in 1:nConds) {
for(sub in 1:nSubs){
if (cond == 3){
afcRates_sub.cond_mean[cond,sub] <-
mean(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff)
& data_trim$subject==sub,]$afc,
na.rm=TRUE)
afcRates_sub.cond_n[cond,sub] <-
dim(data_trim[data_trim$condition==cond &
(data_trim$studyResp < cutoff )
& data_trim$subject==sub,])[1]
} else {
afcRates_sub.cond_mean[cond,sub] <-
mean(data_trim[data_trim$condition==cond
& data_trim$subject==sub,]$afc,
na.rm=TRUE)
afcRates_sub.cond_n[cond,sub] <-
dim(data_trim[data_trim$condition==cond
& data_trim$subject==sub,])[1]
}
# var = n*p*(1-p)
afcRates_sub.cond_sem[cond,sub] <-
sqrt(afcRates_sub.cond_n[cond,sub] * afcRates_sub.cond_mean[cond,sub] *
(1- rRates_sub.cond_mean[cond,sub])) /
sqrt(afcRates_sub.cond_n[cond,sub])
}
}
par(mfrow=c(5,5))
for (sub in 1:nSubs){
plot(afcRates.cond_mean[,sub],rRates.cond_mean[,sub]
, xlim = c(0,1)
, ylim = c(0,1)
, col = cols
, xlab = 'prop 2afc correct'
, ylab = 'recall rate'
)
#legend("topleft", legend = studyConds,
#      col=cols,pch = 1,bty="n")
}
par(mfrow=c(5,5))
for (sub in 1:nSubs){
plot(afcRates_sub.cond_mean[,sub],rRates_sub.cond_mean[,sub]
, xlim = c(0,1)
, ylim = c(0,1)
, col = cols
, xlab = 'prop 2afc correct'
, ylab = 'recall rate'
)
#legend("topleft", legend = studyConds,
#      col=cols,pch = 1,bty="n")
}
par(mfrow=c(3,4))
for (sub in 1:nSubs){
plot(afcRates_sub.cond_mean[,sub],rRates_sub.cond_mean[,sub]
, xlim = c(0,1)
, ylim = c(0,1)
, col = cols
, xlab = 'prop 2afc correct'
, ylab = 'recall rate'
)
#legend("topleft", legend = studyConds,
#      col=cols,pch = 1,bty="n")
}
